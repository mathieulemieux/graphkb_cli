#!/usr/bin/env bash

classList=''
groupBy=''
history=false


# Help
###########################

gkb_stats_help() {
	echo "
Command: stats
Usage: gkb stats [options] [classes]

Options:
	-c, --classList <value>  List of classes to compile seperate counts for. If ommited,
	                         all classes but those abstract, embeeded or non-terminal (w/ subclasses)
	                         Classes MUST be seperated by a comma, WITHOUT space.
	-g, --groupBy   <value>  A column name to group counts on.
	                         [relevance|subject|conditions|evidence|source|
							 evidenceLevel|type|reference1|reference2]
	    --history            Include soft-deleted records
	-h, --help               Get help on the stats command
	"
	exit $1
}


# Options
###############################
# 0: key option
# 1: key-value option
# 2: return help

gkb_stats_options()
{
	case $1 in
		'-c'|'--classList')
			if [[ $2 != '' ]]; then
				echo "1 classList=$2"
			else
				echo "2 $1"
			fi
		;;
		'-g'|'--groupBy')
			if [[ $2 != '' ]]; then
				echo "1 groupBy=$2"
			else
				echo "2 $1"
			fi
		;;
		'--history')
			echo "0 history=true"
		;;
		*)
			echo "2 $1"
		;;
	esac
}


# Stats
###########################

gkb_stats()
{
	if [[ $classList != '' ]]; then
		printf -v classList 'classList=%s' $classList
	else
		printf -v classList ''
	fi

	if [[ $groupBy != '' ]]; then
		printf -v groupBy 'groupBy=%s' $groupBy
	else
		printf -v groupBy ''
	fi

	printf -v history 'history=%s' $history
	printf -v headerAuth 'Authorization: %s' $GKB_TOKEN

	echo $(curl \
        -G \
        -H "Content-Type: application/json" \
		-H "$headerAuth" \
		-d "$classList" \
		-d "$groupBy" \
		-d "$history" \
        --silent \
		$GKB_BASE_URL/stats
    )
}


# Command Entry Point
###########################

# Extract options
options=()
for (( i=1; i <= "$#"; i++ )); do
    if [[ ${!i:0:1} == "-" ]]; then

        # Extract option
        nextArg=$(($i+1))
        IFS=' ' read -r -a option <<< $(gkb_stats_options ${!i} ${!nextArg})

		if [[ ${option[0]} == "0" ]]; then
			options+=(${option[1]})
		elif [[ ${option[0]} == "1" ]]; then
			options+=(${option[1]})
			# Skip next argument since option is paired with a value
			i=$(($i+1))
		else
			if [[ ${option[1]} != '-h' ]] && [[ ${option[1]} != '--help' ]]; then
				echo "${option[1]} cannot be processed. Is the option valid or needs to be paired with a value?"
			fi
			gkb_stats_help 0
		fi

    else
        break
    fi
done

# Set option variables
for (( i=0; i < ${#options[@]}; i++ )); do
	# Carefull use of dynamic eval!
	eval ${options[i]}
done

# Run command
gkb_stats
